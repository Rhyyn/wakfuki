// index.js
import Head from "next/head";
import { useState } from "react";
import { Inter } from "next/font/google";
import styles from "../../styles/Home.module.scss";
import fetchItemsById from "../components/QueryItemTypes/QueryItemTypes";
import { ItemList, length_recipes } from "../components/ItemList/ItemsList.jsx";
import { store_file } from "../services/data-service.jsx";
import { Filter } from "../components/Filter/Filter.jsx";
import { Header } from "../components/Header/Header.jsx";

const inter = Inter({ subsets: ["latin"] });

export default function Home() {
    const [selectedType, setSelectedType] = useState(null);
    const handleLogClick = async () => {
        try {
            fetchItemsById(); // Adjust this based on your actual logic
        } catch (error) {
            console.error("Error fetching and processing data:", error);
        }
    };

    const handleTypeFilter = (types) => {
        console.log("Filtering items by types:", types);
        setSelectedType(types);
        // fetchItemsById(types);
    };

    return (
        <>
            <Head>
                <title>WakfuKi</title>
                <meta
                    name="description"
                    content="Generated by create next app"
                />
                <meta
                    name="viewport"
                    content="width=device-width, initial-scale=1"
                />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <main className={`${styles.main} ${inter.className}`}>
                <Header></Header>
                <div className={styles["global-container"]}>
                    <Filter handleLogClick={handleLogClick} length_recipes={length_recipes} store_file={store_file} handleTypeFilter={handleTypeFilter}></Filter>
                    <div className={styles["item-list"]}>
                        <h3>Item lists</h3>
                        {selectedType != null && (
                            <ItemList
                                key={selectedType.toString()}
                                selectedType={selectedType}
                            />
                        )}
                    </div>
                </div>
            </main>
        </>
    );
}
